library(reticulate)
library(kableExtra)
library(knitr)
library(exactRankTests)
library(nlme)
library(dplyr)
library(ggplot2)
library(compositions)
library(vegan)
library(phyloseq)
library(ape)
py$df_reads_ex %>%
kable() %>%
kable_styling() %>%
scroll_box(width = "350px")
py$df_reads_ex %>%
kable() %>%
kable_styling() %>%
scroll_box(width = "350px")
py$df_reads_ex %>%
kable() %>%
kable_styling() %>%
scroll_box(width = "600px")
R.home()
library(reticulate)
library(kableExtra)
library(knitr)
library(exactRankTests)
library(nlme)
library(dplyr)
library(ggplot2)
library(compositions)
library(vegan)
library(phyloseq)
library(ape)
opts_knit$set(root.dir = '/Users/robynwright/Documents/OneDrive/Langille Lab postdoc/Peptides/')
#reticulate::py_config()
library(reticulate)
library(kableExtra)
library(knitr)
library(exactRankTests)
library(nlme)
library(dplyr)
library(ggplot2)
library(compositions)
library(vegan)
library(phyloseq)
library(ape)
opts_knit$set(root.dir = '/Users/robynwright/Documents/OneDrive/Langille Lab postdoc/Peptides/')
#reticulate::py_config()
library(reticulate)
library(kableExtra)
library(knitr)
library(exactRankTests)
library(nlme)
library(dplyr)
library(ggplot2)
library(compositions)
library(vegan)
library(phyloseq)
library(ape)
opts_knit$set(root.dir = '/Users/robynwright/Documents/OneDrive/Langille Lab postdoc/Peptides/')
#reticulate::py_config()
library(reticulate)
library(kableExtra)
library(knitr)
library(exactRankTests)
library(nlme)
library(dplyr)
library(ggplot2)
library(compositions)
library(vegan)
opts_knit$set(root.dir = '/Users/robynwright/Documents/OneDrive/Github/Human_metagenome/')
#reticulate::py_config()
#8
py$reads_remain %>%
kable() %>%
kable_styling()
library(reticulate)
library(kableExtra)
library(knitr)
library(exactRankTests)
library(nlme)
library(dplyr)
library(ggplot2)
library(vegan)
library(phyloseq)
library(ape)
library(compositions)
library(reticulate)
library(kableExtra)
library(knitr)
library(exactRankTests)
library(nlme)
library(dplyr)
library(ggplot2)
library(vegan)
library(phyloseq)
library(ape)
library(compositions)
library(microbiome)
print(py$basedir)
asv_table <- read.csv(py$basedir+"feature_table.csv", sep=",", row.names=1)
asv_table <- read.csv(paste(py$basedir, "feature_table.csv"), sep=",", row.names=1)
py$basedir
paste(py$basedir, "feature_table.csv")
asv_table <- read.csv(paste(py$basedir, "feature_table.csv"), sep=",", row.names=1)
paste(py$basedir, "feature_table.csv", sep="")
asv_table <- read.csv(paste(py$basedir, "feature_table.csv", sep=""), sep=",", row.names=1)
asv_table = as.matrix(asv_table)
phy_tree <- read_tree("tree.nwk")
phy_tree <- read_tree(paste(py$basedir, "tree.nwk", sep=""))
phy_tree <- read_tree(paste(py$basedir, "qiime_output/tree.nwk", sep=""))
#Convert these to phyloseq objects
ASV = otu_table(asv_table, taxa_are_rows = TRUE)
physeq = phyloseq(ASV,phy_tree)
#Remove ASVs below 1% relative abundance (without doing this, we have too many taxa to agglomerate)
rel_abun <- transform_sample_counts(physeq, function(x) x/sum(x))
remove_low_abun <- filter_taxa(rel_abun, function(x) max(x) > 0.01, TRUE)
physeq
remove_low_abun
#Now do the agglomeration - 0.2 will have the least (~2000 from 7401 for the original data), while 0.05 will keep the most tips (~5000). You can find more information on doing this here: https://www.rdocumentation.org/packages/phyloseq/versions/1.16.2/topics/tip_glom
#0.2 is the default value, but for the analyses shown in the paper we have compromised on 0.1, which gives XX taxa remaining (tips)
agglom <- tip_glom(remove_low_abun, h=0.1)
#And look at how many taxa we now have:
agglom
#And finally we can write the data to file so that we can continue our analysis in Python
tree = phy_tree(agglom)
write_phyloseq(agglom, type="all", path=paste(py$basedir, "agglom/otu_table.csv", ""))
write_phyloseq(agglom, type="all")
write_phyloseq(agglom, type="all", paste(py$basedir, "agglom/otu_table.csv", ""))
fn <- paste(py$basedir, "agglom/otu_table.csv", "")
fn
fn <- paste(py$basedir, "agglom/otu_table.csv", sep="")
write_phyloseq(agglom, type="all", paste(py$basedir, "agglom/otu_table.csv", sep=""))
write_phyloseq(agglom, type="all", path=paste(py$basedir, "agglom/otu_table.csv", sep=""))
fn <- paste(py$basedir, "agglom/otu_table.csv", sep="")
fn
write_phyloseq(agglom, type="all", fn)
setwd(paste(py$basedir, "agglom/"), sep="")
setwd(paste(py$basedir, "agglom/", sep=""))
write_phyloseq(agglom, type="all")
saved_to = write_phyloseq(agglom, type="all")
saved_to
write_phyloseq(agglom, type="all", path=paste(py$basedir, "agglom/", sep=""))
ape::write.tree(tree, paste(py$basedir, "agglom/reduced_tree.tree", sep=""))
